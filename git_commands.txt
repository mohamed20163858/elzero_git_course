git clone  link// clone repo link inside your local machine
git status // tell you the new updates happened in your local machine
git add file_location // you can use * to add all files you updated to your staging area , to select a specific file you just need to specify file file_location
git reset head file_location // remove file from staging area 
git commit -m 'your_message' // add your currently added staging area files to your local repo with a comment your_message
git branch // tell you your branch name
git remote // tell you your remote name 
git remote -v // tell you your remote name  with remote location and info
git push remote_name branch_name // push element from local repo to remote repo 
// ex :- git push origin main 
git pull origin // get new added elements from github server
git config -l // show all config options
git help config // show you a link where you can get all the resources of config commands
git config --global --unset (user.email or user.name)
git config --global user.email // show user email
git config --global user.email your_email_address // set your user.email attribute
git config --global --edit // open config file to edit it after type this command :- git config --global core.editor code
// generate puplic key lesson
ssh-keygen -t rsa -b 4096 -C 'your email' // will ask you to write a password u can write it or not
cat public_key_file path // will show you the content of your public key ex:- cat ~/.ssh/id_rsa.public
// now add your key inside your github account (settings=>deploy keys)
test :- ssh -T git@github.com
git init // create empty repo
touch file_name.extenson // make you create new file
git remote add origin repo_link // tell github you want to upload your files from your local 
git push -u origin main // -u for pulling first then push 
git config --global alias.<new_command> <old_command> // "old command" when the command contain spaces between words 
ex:-
git config --global alias.st status
git config --global alias.cm "commit -m"
git branch <branch_name> // create new branch
git checkout <branch_name> // switch to new branch
git branch -d <branch_name> // delete this branch if and only if this branch is merged in main branch 
git branch -D <branch_name>// force delete the branch whether it is marged or not 
git checkout -b <branch_name> // create new branch and switch to it directly
git branch -m <new_branch_name> // rename the current branch 
git merge <branch_name> // merge the <branch_name>  to current branch i am in 
git stash // save the current files in stash to not upload them to remote server currently and modify them later
git stash pop // pop the files inside last stash into your current branch and remove it from stash 
git stash list // list the files inside the stash
git stash apply // return a copy of your last stash without removing it from stash
git stash save 'ur_message' // save files in a stash with that message
git stash pop stash@{id} // pop files from certain stash id (like accessing array elements)
git stash apply stash@{id} // return copy of files from certain stash id (like accessing array elements)
git stash drop // delete the last stash item
git stash drop stash@{ID} // delete the stash item with id = ID (like accessing array elements)
git stash show// show the contents of the last stash item
git stash show stash@{ID} //  show the contents of the stash item with id = ID (like accessing array elements)
git stash clear // clear all stash elements




